trigger:
  branches:
    include:
    - LNK-2855-auto-db-schema-script
    #- dev
  paths:
    include:
    - DotNet/*/Migrations
    - Java/*/resources/schemas
    exclude:
    - '*'
    
pr: none

pool:
  vmImage: 'ubuntu-latest'

  #####################

stages:
- stage: Build
  jobs:
  - job: getChangedFiles
    displayName: Get Changes
    steps: 
      - checkout: self
        fetchDepth: 0
      - task: PowerShell@2
        name: setVariables
        inputs:
          targetType: 'inline'
          script: |
            #Get any changed files
            $changedFiles = git diff --name-status HEAD HEAD^ 
            
            # Account - Return $true if path has changed files
            $accountBool = ((Select-String -InputObject $changedFiles -Pattern "Dotnet/Account/Migrations/" -AllMatches).Matches.Count -gt 0) 
            Write-Host "##vso[task.setvariable variable=accountChanged;isOutput=true;]$accountBool" 

            # Audit - Return $true if path has changed files
            $auditBool = ((Select-String -InputObject $changedFiles -Pattern "Dotnet/Audit/Migrations/" -AllMatches).Matches.Count -gt 0) 
            Write-Host "##vso[task.setvariable variable=auditChanged;isOutput=true;]$auditBool" 

            # Census - Return $true if path has changed files
            $censusBool = ((Select-String -InputObject $changedFiles -Pattern "Dotnet/Census/Migrations/" -AllMatches).Matches.Count -gt 0) 
            Write-Host "##vso[task.setvariable variable=censusChanged;isOutput=true;]$censusBool" 

            # DataAcquisition - Return $true if path has changed files
            $dataBool = ((Select-String -InputObject $changedFiles -Pattern "Dotnet/DataAcquisition/Migrations/" -AllMatches).Matches.Count -gt 0) 
            Write-Host "##vso[task.setvariable variable=dataChanged;isOutput=true;]$dataBool" 

            # Normalization - Return $true if path has changed files
            $normBool = ((Select-String -InputObject $changedFiles -Pattern "Dotnet/Normalization/Migrations/" -AllMatches).Matches.Count -gt 0) 
            Write-Host "##vso[task.setvariable variable=normChanged;isOutput=true;]$normBool" 

            # QueryDispatch - Return $true if path has changed files
            $queryBool = ((Select-String -InputObject $changedFiles -Pattern "Dotnet/QueryDispatch/Migrations/" -AllMatches).Matches.Count -gt 0) 
            Write-Host "##vso[task.setvariable variable=queryChanged;isOutput=true;]$queryBool" 

            # Report - Return $true if path has changed files
            $reportBool = ((Select-String -InputObject $changedFiles -Pattern "Dotnet/Report/Migrations/" -AllMatches).Matches.Count -gt 0) 
            Write-Host "##vso[task.setvariable variable=reportChanged;isOutput=true;]$reportBool" 

            # Submission - Return $true if path has changed files
            $submissionBool = ((Select-String -InputObject $changedFiles -Pattern "Dotnet/Submission/Migrations/" -AllMatches).Matches.Count -gt 0) 
            Write-Host "##vso[task.setvariable variable=submissionChanged;isOutput=true;]$submissionBool" 

            # Tenant - Return $true if path has changed files
            $tenantBool = ((Select-String -InputObject $changedFiles -Pattern "Dotnet/Tenant/Migrations/" -AllMatches).Matches.Count -gt 0) 
            Write-Host "##vso[task.setvariable variable=tenantChanged;isOutput=true;]$tenantBool" 

            Write-Host "##vso[task.setvariable variable=task.A.status]Success"
  ###
  # Account
  - job: Account
    displayName: "Generate Account Schema Script"
    #dependsOn: getChangedFiles
    # variables: 
    #   changed: $[ dependencies.getChangedFiles.outputs['setVariables.accountChanged'] ]
    #condition: eq(variables.changed, 'True')
    steps:
      - task: DotNetCoreCLI@2
        displayName: Install dotnet-ef
        inputs:
         command: 'custom'
         custom: 'tool'
         arguments: 'install --global dotnet-ef'
      - script: |
         dotnet ef migrations script \
         --idempotent \
         --verbose \
         -o $(build.artifactstagingdirectory)/DatabaseScripts/accountDb.sql
        displayName: Generate Account SQL Script
  ###
  # Audit
  - job: Audit
    displayName: "Generate Audit Schema Script"
    #dependsOn: getChangedFiles
    #variables: 
      #changed: $[ dependencies.getChangedFiles.outputs['setVariables.auditChanged'] ]
    #condition: eq(variables.changed, 'True')
    steps: 
      - script: |
         dotnet ef migrations script \
         --idempotent \
         --verbose \
         -c AuditDbContext \
         -s $(build.sourcesdirectory)/Dotnet/Audit/Audit.csproj \
         -p $(build.sourcesdirectory)/Audit/Audit.csproj\
         -o $(build.artifactstagingdirectory)/DatabaseScripts/auditDb.sql
        displayName: Generate Audit SQL Script
  ###
  # Census
  - job: Census
    displayName: "Generate Census Schema Script"
    #dependsOn: getChangedFiles
    # variables: 
    #   changed: $[ dependencies.getChangedFiles.outputs['setVariables.censusChanged'] ]
    #condition: eq(variables.changed, 'True')
    steps: 
      - script: |
         dotnet ef migrations script \
         --idempotent \
         --verbose \
         -c AuditDbContext \
         -s $(build.sourcesdirectory)/Dotnet/Census/Census.csproj \
         -p $(build.sourcesdirectory)/Census/Census.csproj\
         -o $(build.artifactstagingdirectory)/DatabaseScripts/censusDb.sql
        displayName: Generate Census SQL Script

  ###
  # DataAcquisition
  - job: DataAcquisition
    displayName: "Generate Data Acquisition Schema Script"
    #dependsOn: getChangedFiles
    # variables: 
    #   changed: $[ dependencies.getChangedFiles.outputs['setVariables.dataChanged'] ]
    #condition: eq(variables.changed, 'True')
    steps:
      - script: |
         dotnet ef migrations script \
         --idempotent \
         --verbose \
         -c DataAcquisitionDbContext \
         -s $(build.sourcesdirectory)/Dotnet/DataAcquisition/DataAcquisition.csproj \
         -p $(build.sourcesdirectory)/Dotnet/DataAcquisition.Domain/DataAcquisition.Domain.csproj\
         -o $(build.artifactstagingdirectory)/DatabaseScripts/dataDb.sql
        displayName: Generate DataAcquisition SQL Script
  ###
  # Normalization
  - job: Normalization
    displayName: "Generate Data Acquisition Schema Script"
    #dependsOn: getChangedFiles
    # variables: 
    #   changed: $[ dependencies.getChangedFiles.outputs['setVariables.normChanged'] ]
    #condition: eq(variables.changed, 'True')
    steps:
    - script: |
         dotnet ef migrations script \
         --idempotent \
         --verbose \
         -c NormalizationDbContext \
         -s $(build.sourcesdirectory)/Dotnet/Normalization/Normalization.csproj \
         -p $(build.sourcesdirectory)/Dotnet/Normalization/Normalization.csproj\
         -o $(build.artifactstagingdirectory)/DatabaseScripts/normalizationDb.sql
      displayName: Generate Normalization SQL Script
  ###
  # Notification
  - job: Notification
    displayName: "Generate Notification Schema Script"
    #dependsOn: getChangedFiles
    # variables: 
    #   changed: $[ dependencies.getChangedFiles.outputs['setVariables.notificationChanged'] ]
    #condition: eq(variables.changed, 'True')
    steps:
    - script: |
         dotnet ef migrations script \
         --idempotent \
         --verbose \
         -c NotificationDbContext \
         -s $(build.sourcesdirectory)/Dotnet/Notification/Notification.csproj \
         -p $(build.sourcesdirectory)/Dotnet/Notification/Notification.csproj\
         -o $(build.artifactstagingdirectory)/DatabaseScripts/notificationDb.sql
      displayName: Generate Notification SQL Script
  ###
  # QueryDispatch
  - job: QueryDispatch
    displayName: "Generate QueryDispatch Schema Script"
    #dependsOn: getChangedFiles
    # variables: 
    #   changed: $[ dependencies.getChangedFiles.outputs['setVariables.queryChanged'] ]
    #condition: eq(variables.changed, 'True')
    steps:
    - script: |
         dotnet ef migrations script \
         --idempotent \
         --verbose \
         -c QueryDispatchDbContext \
         -s $(build.sourcesdirectory)/Dotnet/QueryDispatch/QueryDispatch.csproj \
         -p $(build.sourcesdirectory)/Dotnet/QueryDispatch/QueryDispatch.csproj\
         -o $(build.artifactstagingdirectory)/DatabaseScripts/queryDispatchDb.sql
      displayName: Generate QueryDispatch SQL Script
  ###
  # Submission
  - job: Submission
    displayName: "Build Submission"
    #dependsOn: getChangedFiles
    # variables: 
    #   changed: $[ dependencies.getChangedFiles.outputs['setVariables.submissionChanged'] ]
    #condition: eq(variables.changed, 'True')
    steps:
    - script: |
         dotnet ef migrations script \
         --idempotent \
         --verbose \
         -c TenantSubmissionDbContext \
         -s $(build.sourcesdirectory)/Dotnet/Submission/Submission.csproj \
         -p $(build.sourcesdirectory)/Dotnet/Submission/Submission.csproj\
         -o $(build.artifactstagingdirectory)/DatabaseScripts/submissionDb.sql
      displayName: Generate Submission SQL Script
  ###
  # Tenant
  - job: Tenant
    displayName: "Build Tenant"
    #dependsOn: getChangedFiles
    # variables: 
    #   changed: $[ dependencies.getChangedFiles.outputs['setVariables.tenantChanged'] ]
    #condition: eq(variables.changed, 'True')
    steps:
    - script: |
         dotnet ef migrations script \
         --idempotent \
         --verbose \
         -c FacilityDbContext \
         -s $(build.sourcesdirectory)/Dotnet/Tenant/Tenant.csproj \
         -p $(build.sourcesdirectory)/Dotnet/Tenant/Tenant.csproj\
         -o $(build.artifactstagingdirectory)/DatabaseScripts/tenantDb.sql
      displayName: Generate Tenant SQL Script
  ###
  # Publish
  - job: Publish
    displayName: "Publish"
    steps:
    - task: PublishBuildArtifacts@1
      inputs:
       PathtoPublish: '$(Build.ArtifactStagingDirectory)'
       ArtifactName: 'scripts'
       publishLocation: 'container'
      displayName: Generate Tenant SQL Script  
  # ###
  # # Validation
  # - job: Validation
  #   displayName: "Build Validation"
  #   dependsOn: getChangedFiles
  #   variables: 
  #     changed: $[ dependencies.getChangedFiles.outputs['setVariables.validationChanged'] ]
  #   condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
  #   steps: 
  #   - task: Docker@2
  #     displayName: "Build & Push Validation"
  #     condition: always()
  #     inputs:
  #       containerRegistry: 'Link ACR'
  #       repository: $(Validation-Name)
  #       command: 'buildAndPush'
  #       Dockerfile: '**/Validation/Dockerfile'
  #       tags: '$(tags)'
  #       buildContext: '$(Build.Repository.LocalPath)'
  #   - task: Kubernetes@1
  #     displayName: "Deploy Validation"
  #     inputs:
  #       connectionType: 'Kubernetes Service Connection'
  #       kubernetesServiceEndpoint: 'Link BOTW'
  #       namespace: 'dev-scale'
  #       command: 'set'
  #       arguments: 'image -n dev-scale deployment validation-deploy validation=nhsnlink.azurecr.io/$(Validation-Name):$(Build.BuildId)'
  #       secretType: 'dockerRegistry'
  #       containerRegistryType: 'Azure Container Registry'

    
    